C51 COMPILER V9.53.0.0   EEPROM                                                            11/01/2018 11:04:33 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\src\eeprom.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Mikropr
                    -\SimplicityStudio\v4_workspace\EEPROM_AT24C32N_EFM8LB1\src\eeprom.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVE
                    -L(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Mikropr\SimplicityStud
                    -io\v4_workspace\EEPROM_AT24C32N_EFM8LB1\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.2//Device/shared
                    -/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.2//Device/EFM8LB1/inc) PRINT(.\src\eeprom.lst) C
                    -OND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\eeprom.OBJ)

line level    source

   1          //   Timer1 - SMBus clock source
   2          //   Timer3 - SMBus SCL low timeout detection
   3          //   P1.2   - SMBus SDA
   4          //   P1.3   - SMBus SCL
   5          
   6          #include <SI_EFM8LB1_Register_Enums.h>
   7          #include "InitDevice.h"
   8          #include "eeprom.h"
   9          
  10          //-----------------------------------------------------------------------------
  11          // Pin Definitions
  12          //-----------------------------------------------------------------------------
  13          SI_SBIT(LED1, SFR_P1, 4);                       // DS5 P1.0 LED
  14          
  15          #define LED_ON                       0
  16          #define LED_OFF                      1
  17          
  18          SI_SBIT(SDA, SFR_P0, 1);                        // SMBus on P0.1
  19          SI_SBIT(SCL, SFR_P0, 2);                        // and P0.2
  20          
  21          //-----------------------------------------------------------------------------
  22          // Global Variables
  23          //-----------------------------------------------------------------------------
  24          uint8_t i;                                      // Temporary counter variable
  25          
  26          uint8_t* pSMB_DATA_IN;                          // Global pointer for SMBus data
  27                                                          // All receive data is written here
  28          
  29          uint8_t SMB_SINGLEBYTE_OUT;                     // Global holder for single byte writes.
  30          
  31          uint8_t* pSMB_DATA_OUT;                         // Global pointer for SMBus data.
  32                                                          // All transmit data is read from here
  33          
  34          uint8_t SMB_DATA_LEN;
  35          
  36          uint8_t WORD_ADDR_1;
  37          uint8_t WORD_ADDR_2;
  38          
  39          uint8_t TARGET;                                 // Target SMBus slave address
  40          
  41          volatile bool SMB_BUSY = 0;                     // Software flag to indicate when the
  42                                                          // EEPROM_ByteRead() or
  43                                                      // EEPROM_ByteWrite()
  44                                                      // functions have claimed the SMBus
  45          
  46          volatile bool SMB_RW;                           // Software flag to indicate the
  47                                                      // direction of the current transfer
  48          
  49          volatile bool SMB_SENDWORDADDR;                 // When set, this flag causes the ISR
  50                                                      // to send the 8-bit <WORD_ADDR>
  51                                                      // after sending the slave address.
C51 COMPILER V9.53.0.0   EEPROM                                                            11/01/2018 11:04:33 PAGE 2   

  52          
  53          
  54          volatile bool SMB_RANDOMREAD;                   // When set, this flag causes the ISR
  55                                                      // to send a START signal after sending
  56                                                      // the word address.
  57          
  58          volatile bool SMB_ACKPOLL;                      // When set, this flag causes the ISR
  59                                                      // to send a repeated START until the
  60                                                      // slave has acknowledged its address
  61          
  62          //-----------------------------------------------------------------------------
  63          // EEPROM_CheckSDA ()
  64          //-----------------------------------------------------------------------------
  65          void EEPROM_CheckSDA () {
  66   1              while(!SDA) {
  67   2                      XBR2 = 0x40;                            // Enable Crossbar
  68   2                      SCL = 0;                                // Drive the clock low
  69   2                      for(i = 0; i < 255; i++);               // Hold the clock low
  70   2                      SCL = 1;                                // Release the clock
  71   2                      while(!SCL);                            // Wait for open-drain
  72   2                      // clock output to rise
  73   2                      for(i = 0; i < 10; i++);                // Hold the clock high
  74   2                      XBR2 = 0x00;                            // Disable Crossbar
  75   2              }
  76   1      }
  77          
  78          //-----------------------------------------------------------------------------
  79          // EEPROM_ByteWrite ()
  80          //-----------------------------------------------------------------------------
  81          void EEPROM_ByteWrite(uint8_t addr_1, uint8_t addr_2, uint8_t dat) {
  82   1         while (SMB_BUSY);                            // Wait for SMBus to be free.
  83   1         SMB_BUSY = 1;                                // Claim SMBus (set to busy)
  84   1      
  85   1         // Set SMBus ISR parameters
  86   1         TARGET = EEPROM_ADDR;                        // Set target slave address
  87   1         SMB_RW = WRITE;                              // Mark next transfer as a write
  88   1         SMB_SENDWORDADDR = 1;                        // Send Word Address after Slave Address
  89   1         SMB_RANDOMREAD = 0;                          // Do not send a START signal after
  90   1      
  91   1         SMB_ACKPOLL = 1;                             // Enable Acknowledge Polling
  92   1      
  93   1         // Specify the Outgoing Data
  94   1         WORD_ADDR_1 = addr_1;                    // Set the target address in the
  95   1                                                  // EEPROM's internal memory space
  96   1      
  97   1         WORD_ADDR_2 = addr_2;
  98   1      
  99   1         SMB_SINGLEBYTE_OUT = dat;
 100   1      
 101   1         // The outgoing data pointer points to the <dat> variable
 102   1         pSMB_DATA_OUT = &SMB_SINGLEBYTE_OUT;
 103   1      
 104   1         SMB_DATA_LEN = 1;
 105   1      
 106   1         // Initiate SMBus Transfer
 107   1         SMB0CN0_STA = 1;
 108   1      
 109   1      }
 110          
 111          //-----------------------------------------------------------------------------
 112          // EEPROM_ByteRead ()
 113          //-----------------------------------------------------------------------------
 114          uint8_t EEPROM_ByteRead(uint8_t addr_1, uint8_t addr_2) {
C51 COMPILER V9.53.0.0   EEPROM                                                            11/01/2018 11:04:33 PAGE 3   

 115   1         uint8_t retval;                                      // Holds the return value
 116   1      
 117   1         while (SMB_BUSY);                            // Wait for SMBus to be free.
 118   1         SMB_BUSY = 1;                                // Claim SMBus (set to busy)
 119   1      
 120   1         // Set SMBus ISR parameters
 121   1         TARGET = EEPROM_ADDR;                        // Set target slave address
 122   1         SMB_RW = WRITE;
 123   1      
 124   1         SMB_SENDWORDADDR = 1;                        // Send Word Address after Slave Address
 125   1         SMB_RANDOMREAD = 1;                          // Send a START after the word address
 126   1         SMB_ACKPOLL = 1;                             // Enable Acknowledge Polling
 127   1      
 128   1         // Specify the Incoming Data
 129   1         WORD_ADDR_1 = addr_1;
 130   1      
 131   1         WORD_ADDR_2 = addr_2;
 132   1      
 133   1         pSMB_DATA_IN = &retval;
 134   1      
 135   1         SMB_DATA_LEN = 1;
 136   1      
 137   1         // Initiate SMBus Transfer
 138   1         SMB0CN0_STA = 1;
 139   1         while(SMB_BUSY);                             // Wait until data is read
 140   1      
 141   1         return retval;
 142   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    116    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
