C51 COMPILER V9.53.0.0   INTERRUPTS                                                        11/01/2018 11:04:32 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Mikropr
                    -\SimplicityStudio\v4_workspace\EEPROM_AT24C32N_EFM8LB1\src\Interrupts.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNING
                    -LEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Mikropr\Simplicity
                    -Studio\v4_workspace\EEPROM_AT24C32N_EFM8LB1\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.2//Device/sh
                    -ared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.2//Device/EFM8LB1/inc) PRINT(.\src\Interrupt
                    -s.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Interrupts.OBJ)

line level    source

   1          #include <SI_EFM8LB1_Register_Enums.h>
   2          #include "eeprom.h"
   3          
   4          //--------------------------------------------------------------------------------------------------------
             --------------------------------------------------
   5          // SMBUS0_ISR
   6          //--------------------------------------------------------------------------------------------------------
             --------------------------------------------------
   7          SI_INTERRUPT (SMBUS0_ISR, SMBUS0_IRQn) {
   8   1              static bool FAIL = 0;
   9   1      
  10   1              static uint8_t i;
  11   1      
  12   1              static uint8_t f_s_byte = 0;
  13   1      
  14   1              static bool SEND_START = 0;                                     // Send a start
  15   1      
  16   1              switch (SMB0CN0 & 0xF0) {                                               // Status vector
  17   2                      // Master Transmitter/Receiver: START condition transmitted.
  18   2                      case SMB_MTSTA:
  19   2                      SMB0DAT = TARGET;                                                       // Load address of the target slave
  20   2                      SMB0DAT &= 0xFE;                                                        // Clear the LSB of the address for the
  21   2                                                                                                              // R/W bit
  22   2                      SMB0DAT |= (uint8_t) SMB_RW;                            // Load R/W bit
  23   2                      SMB0CN0_STA = 0;                                                        // Manually clear START bit
  24   2                      i = 0;                                                                          // Reset data byte counter
  25   2                      break;
  26   2      ///-------------------------------------------------------------------------------------------------------
             --------------------------------------------------
  27   2                      // Master Transmitter: Data byte (or Slave Address) transmitted
  28   2                      case SMB_MTDB:
  29   2                      if (SMB0CN0_ACK) {                                                      // Slave Address or Data Byte
  30   3                                                                              // Acknowledged?
  31   3                              if (SEND_START) {
  32   4                                      SMB0CN0_STA = 1;
  33   4                                      SEND_START = 0;
  34   4                                      break;
  35   4                              }
  36   3                              if(SMB_SENDWORDADDR) {                          // Are we sending the word address?
  37   4      //                              SMB_SENDWORDADDR = 0;                           // Clear flag
  38   4      //                              SMB0DAT = WORD_ADDR_1;                          // Send word address
  39   4      
  40   4                                      if (f_s_byte) {
  41   5                                              SMB_SENDWORDADDR = 0;                   // Clear flag
  42   5                                              SMB0DAT = WORD_ADDR_2;                  // Send word address
  43   5                                              if (SMB_RANDOMREAD) {
  44   6                                                      SEND_START = 1;                         // Send a START after the next SMB0CN_ACK cycle
  45   6                                                      SMB_RW = READ;
  46   6                                              }
  47   5                                      } else {
  48   5                                              SMB0DAT = WORD_ADDR_1;                  // Send word address
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        11/01/2018 11:04:32 PAGE 2   

  49   5                                              f_s_byte++;
  50   5                                      }
  51   4      
  52   4      //                              if (SMB_RANDOMREAD) {
  53   4      //                                      SEND_START = 1;                                 // Send a START after the next SMB0CN_ACK cycle
  54   4      //                                      SMB_RW = READ;
  55   4      //                              }
  56   4      
  57   4                                      break;
  58   4                              }
  59   3      ///-------------------------------------------------------------------------------------------------------
             --------------------------------------------------
  60   3                              if (SMB_RW==WRITE) {                            // Is this transfer a WRITE?
  61   4                                      if (i < SMB_DATA_LEN) {                         // Is there data to send?
  62   5                                              // send data byte
  63   5                                              SMB0DAT = *pSMB_DATA_OUT;
  64   5      
  65   5                                              // increment data out pointer
  66   5                                              pSMB_DATA_OUT++;
  67   5      
  68   5                                              // increment number of bytes sent
  69   5                                              i++;
  70   5                                      } else {
  71   5                                              SMB0CN0_STO = 1;                        // Set SMB0CN_STO to terminte transfer
  72   5                                              SMB_BUSY = 0;                                   // Clear software busy flag
  73   5                                              f_s_byte = 0;
  74   5                                      }
  75   4                              } else {}                                       // If this transfer is a READ,
  76   3                                                                                                              // then take no action. Slave
  77   3                                                                                                      // address was transmitted. A
  78   3                                                                                                      // separate 'case' is defined
  79   3                                                                                                      // for data byte recieved.
  80   3                      } else {                                                // If slave NACK,
  81   3                              if(SMB_ACKPOLL) {
  82   4                                      SMB0CN0_STA = 1;                        // Restart transfer
  83   4                              } else {
  84   4                                      FAIL = 1;                                       // Indicate failed transfer
  85   4                              }                                                       // and handle at end of ISR
  86   3                      }
  87   2                      break;
  88   2      ///-------------------------------------------------------------------------------------------------------
             --------------------------------------------------
  89   2                      // Master Receiver: byte received
  90   2                      case SMB_MRDB:
  91   2                      if ( i < SMB_DATA_LEN ) {                                       // Is there any data remaining?
  92   3                              *pSMB_DATA_IN = SMB0DAT;                                // Store received byte
  93   3                              pSMB_DATA_IN++;                                                 // Increment data in pointer
  94   3                              i++;                                                                    // Increment number of bytes received
  95   3                              SMB0CN0_ACK = 1;                                                // Set SMB0CN_ACK bit (may be cleared later
  96   3                                                                                                              // in the code)
  97   3                      }
  98   2      
  99   2                      if (i == SMB_DATA_LEN) {                                // This is the last byte
 100   3                              SMB_BUSY = 0;                                           // Free SMBus interface
 101   3                              SMB0CN0_ACK = 0;                                                // Send NACK to indicate last byte
 102   3                                                                                                              // of this transfer
 103   3                              f_s_byte = 0;
 104   3                              SMB0CN0_STO = 1;                                                // Send STOP to terminate transfer
 105   3                      }
 106   2      
 107   2                      break;
 108   2      
 109   2                      default:
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        11/01/2018 11:04:32 PAGE 3   

 110   2                      FAIL = 1;                                               // Indicate failed transfer
 111   2                                                                                                      // and handle at end of ISR
 112   2                      break;
 113   2              }
 114   1      ///-------------------------------------------------------------------------------------------------------
             --------------------------------------------------
 115   1              if (FAIL) {                                             // If the transfer failed,
 116   2                      SMB0CF &= ~0x80;                                        // Reset communication
 117   2                      SMB0CF |= 0x80;
 118   2                      SMB0CN0_STA = 0;
 119   2                      SMB0CN0_STO = 0;
 120   2                      SMB0CN0_ACK = 0;
 121   2      
 122   2                      SMB_BUSY = 0;                                                           // Free SMBus
 123   2      
 124   2                      FAIL = 0;
 125   2              }
 126   1      ///-------------------------------------------------------------------------------------------------------
             --------------------------------------------------
 127   1              SMB0CN0_SI = 0;                                         // Clear interrupt flag
 128   1      }
 129          
 130          //--------------------------------------------------------------------------------------------------------
             --------------------------------------------------
 131          // TIMER3_ISR
 132          //--------------------------------------------------------------------------------------------------------
             --------------------------------------------------
 133          SI_INTERRUPT (TIMER3_ISR, TIMER3_IRQn) {
 134   1              SMB0CF &= ~0x80;                                        // Disable SMBus
 135   1              SMB0CF |= 0x80;                                                                 // Re-enable SMBus
 136   1              TMR3CN0 &= ~0x80;                                                               // Clear Timer3 interrupt-pending flag
 137   1              SMB_BUSY = 0;                                                                   // Free bus
 138   1      }
 139          
 140          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    261    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
